tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  # SODALITE types
  - sodalite/openstack/openstack_keypair.yaml
  - sodalite/openstack/openstack_security_rule.yaml
  - sodalite/openstack/openstack_vm.yaml
  - sodalite/docker/docker_host.yaml
  - sodalite/docker/docker_network.yaml
  - sodalite/docker/docker_registry.yaml
  - sodalite/docker/docker_component.yaml
  - sodalite/docker/docker_certificate.yaml
  - sodalite/docker/docker_volume.yaml

  # RADON types
  - radon/_definitions/radonnodesnifi__Nifi.tosca
  - radon/_definitions/radonnodesdatapipelinedestination__PubsS3Bucket.tosca
  - radon/_definitions/radonnodesdatapipelinesource__ConsumeLocal.tosca
  - radon/_definitions/radonrelationshipsdatapipeline__ConnectNifiLocal.tosca
  - radon/_definitions/radonnodesaws__AwsS3Bucket.tosca
  - radon/_definitions/radonnodesaws__AwsLambdaFunction.tosca
  - radon/_definitions/radonartifactsarchive__JAR.tosca
  - radon/_definitions/radonnodesaws__AwsPlatform.tosca
  - radon/_definitions/radonrelationships__ConnectsTo.tosca
  - radon/_definitions/radonrelationshipsaws__AwsTriggers.tosca

node_types:

  sodalite.nodes.ConfigurationDemo:        
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      mysql_db_pass:
        type: string
        description: MYSQL database password.
        required: true
    requirements:
      - remote_server:  
          capability: tosca.capabilities.Compute 
          node: sodalite.nodes.OpenStack.VM
          relationship: tosca.relationships.DependsOn            
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:      
            inputs:
              remote_server: { type: string, default: { get_attribute: [ SELF, remote_server, public_address ] } }   
              mysql_db_pass: { type: string, default: { get_property: [ SELF, mysql_db_pass ] } }           
            implementation:
              primary: playbooks/configure_demo.yml
              dependencies: 
                - playbooks/config.json.tmpl

  sodalite.nodes.S3GalleryFrontEndConfiguration:        
    derived_from: tosca.nodes.SoftwareComponent         
    properties:
      dest_dir_path:
        type: string
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create: 
            inputs:
              dest_dir_path: { type: string, default: { get_property: [ SELF, dest_dir_path ] } }         
            implementation:
              primary: playbooks/configure_s3_gallery_frontend.yml
              dependencies: 
                - s3-gallery/radon.png
                - s3-gallery/sodalite.png
                - s3-gallery/s3.php
                - s3-gallery/s3.py

topology_template:

  inputs:  

    snow-ssh-key-name:  
      type: string 
    snow-ssh-public-key:  
      type: string 
    snow-image-name:  
      type: string 
    openstack-network-name:  
      type: string 
    openstack-floating-ip-pool:  
      type: string 
    snow-security-groups:  
      type: string    
    snow-flavor-name:  
      type: string
    snow-vm-username:
      type: string 
    os-env:
      type: map 
                 
    demo-files-path:  
      type: string
      default: ""     
    s3-gallery-config-path:  
      type: string
      default: ""    
    docker-registry-url: 
      type: string
    docker-network: 
      type: string      
    docker-registry-cert-country-name:
      type: string
      default: ""
    docker-registry-cert-organization-name: 
      type: string
      default: ""
    docker-registry-cert-email-address: 
      type: string
      default: ""
    mysql-db-pass: 
      type: string
      default: ""      
    mysql-env: 
      type: map

    s3-gallery-config-path:  
      type: string
    s3-gallery-env:  
      type: map

  node_templates: 
### Prepare OpenStack resources
    snow-keypair:
      type: sodalite.nodes.OpenStack.Keypair
      properties:  
        name: { get_input: snow-ssh-key-name } 
        public_key: { get_input: snow-ssh-public-key } 
        env: { get_input: os-env } 

    snow-security-rules:  
      type: sodalite.nodes.OpenStack.SecurityRules 
      properties:  
        ports:  
          component_ports:  
            port_range_max: 8082 # adding new port for NiFi # 8081 
            remote_ip_prefix: 0.0.0.0/0 
            port_range_min: 8080 
            protocol: tcp 
          http_port:  
            port_range_min: 80 
            port_range_max: 80 
            protocol: tcp 
            remote_ip_prefix: 0.0.0.0/0 
          ssh:  
            protocol: tcp 
            remote_ip_prefix: 0.0.0.0/0 
            port_range_min: 22 
            port_range_max: 22
        group_name:  snow 
        group_description:  Snow UC security group 
        env: { get_input: os-env } 

    snow-vm:  
      type: sodalite.nodes.OpenStack.VM 
      properties:  
        name:  snow-vm
        key_name:         { get_input: snow-ssh-key-name } 
        image:            { get_input: snow-image-name }
        network:          { get_input: openstack-network-name } 
        security_groups:  { get_input: snow-security-groups } 
        flavor:           { get_input: snow-flavor-name }
        username:         { get_input: snow-vm-username }
        include_exporter: false
        timeout: 666
        floating_ip_pools: { get_input: openstack-floating-ip-pool } 
        env: { get_input: os-env } 
      requirements:  
        - protected_by: snow-security-rules
        - dependency: snow-keypair

    snow-vm-2:  
      type: sodalite.nodes.OpenStack.VM 
      properties:  
        name:  snow-vm-2
        key_name:         { get_input: snow-ssh-key-name } 
        image:            { get_input: snow-image-name }
        network:          { get_input: openstack-network-name } 
        security_groups:  { get_input: snow-security-groups } 
        flavor:           { get_input: snow-flavor-name }
        username:         { get_input: snow-vm-username }
        include_exporter: false
        timeout: 666
        floating_ip_pools: { get_input: openstack-floating-ip-pool } 
        env: { get_input: os-env } 
      requirements:  
        - protected_by: snow-security-rules
        - dependency: snow-keypair  


### Prepare Docker environment
    snow-docker-host:  
      type: sodalite.nodes.DockerHost 
      requirements:  
        - host:  snow-vm

    snow-docker-registry-certificate:
      type: sodalite.nodes.RegistryCertificate
      properties:  
        registry_ip:         { get_input: docker-registry-url }
        country_name:        { get_input: docker-registry-cert-country-name }
        organization_name:   { get_input: docker-registry-cert-organization-name }
        email_address:       { get_input: docker-registry-cert-email-address }
      requirements:
        - host: snow-vm 
        - dependency: snow-docker-host        
  
    snow-docker-host-2:  
      type: sodalite.nodes.DockerHost 
      requirements:  
        - host:  snow-vm-2     
        
    snow-docker-registry-certificate-2:
      type: sodalite.nodes.RegistryCertificate
      properties:  
        registry_ip:         { get_input: docker-registry-url }
        country_name:        { get_input: docker-registry-cert-country-name }
        organization_name:   { get_input: docker-registry-cert-organization-name }
        email_address:       { get_input: docker-registry-cert-email-address }
      requirements:
        - host: snow-vm-2 
        - dependency: snow-docker-host-2     
        
    snow-docker-registry:
      type: sodalite.nodes.DockerRegistry
      properties:  
        docker_registry_url: { get_input: docker-registry-url } 
      requirements:
        - host: snow-vm
        - dependency: snow-docker-host 
        - dependency: snow-docker-host-2
        - dependency: snow-docker-registry-certificate
        - dependency: snow-docker-registry-certificate-2

    snow-docker-network:
      type: sodalite.nodes.DockerNetwork
      properties:  
        name: { get_input: docker-network }
      requirements:
        - host: snow-vm    
        - dependency: snow-docker-host 


### Prepare Snow use case components
    configuration-demo:
      type: sodalite.nodes.ConfigurationDemo  
      properties:  
        mysql_db_pass: { get_input: mysql-db-pass }    
      requirements:
        - host: snow-vm         
        - remote_server: snow-vm-2  

    snow-docker-volume-shots:
      type: sodalite.nodes.DockerVolume
      properties:  
        name: snow_volume_shots
      requirements:
        - host: snow-vm 
        - dependency: snow-docker-host         

    snow-docker-volume-masks:
      type: sodalite.nodes.DockerVolume
      properties:  
        name: snow_volume_masks
      requirements:
        - host: snow-vm  
        - dependency: snow-docker-host         
            
    snow-docker-volume-daily-shots:
      type: sodalite.nodes.DockerVolume
      properties:  
        name: snow_volume_daily_shots
      requirements:
        - host: snow-vm  
        - dependency: snow-docker-host         

    snow-mysql:  
      type: sodalite.nodes.DockerizedComponent 
      properties:  
        docker_network_name:  { get_property: [ SELF, network, name ] } 
        image_name:  snow-mysql:latest 
        command: "--default-authentication-plugin=mysql_native_password"
        ports:  ['3306:3306'] 
        exposed_ports:  ['3306']
        alias: mysql
        env: { get_input: mysql-env }
      requirements:  
        - host:  snow-docker-host 
        - network: snow-docker-network 
        - registry: snow-docker-registry

    snow-webcam-crawler:  
      type: sodalite.nodes.DockerizedComponent 
      properties:  
        docker_network_name:  { get_property: [ SELF, network, name ] } 
        volumes:  
        - /tmp/conf/config.json:/SnowWatch-SODALITE/WebCamCrawler/config.json
        - "snow_volume_shots:/SnowWatch-SODALITE/data/shots"
        #- "/tmp/masks:/SnowWatch-SODALITE/data/masks"
        - "snow_volume_daily_shots:/SnowWatch-SODALITE/data/daily_shots"
        image_name:  snow-webcam-crawler:latest 
        alias: snow-webcam-crawler
        command: "34,40,50,62,608,666,822,852,943,1307,6666"
      requirements:  
        - host:  snow-docker-host 
        - dependency: snow-mysql
        - dependency: snow-docker-volume-shots
        - dependency: configuration-demo
        - network: snow-docker-network 
        - registry: snow-docker-registry

    snow-weather-condition-filter:  
      type: sodalite.nodes.DockerizedComponent 
      properties:  
        docker_network_name:  { get_property: [ SELF, network, name ] } 
        volumes:  
        - /tmp/conf/config.json:/SnowWatch-SODALITE/config.json 
        - "snow_volume_shots:/SnowWatch-SODALITE/data/shots"
        #- "/tmp/masks:/SnowWatch-SODALITE/data/masks"
        - "snow_volume_daily_shots:/SnowWatch-SODALITE/data/daily_shots"
        image_name:  snow-weather-condition-filter:latest 
        alias: snow-weather-condition-filter
        restart_policy: always
        command: 
          - "{{ ansible_date_time.date }}"
          - "34 40 50 62 608 666 822 852 943 1307 6666"        
      requirements:  
        - host:  snow-docker-host
        - dependency: snow-mysql
        - dependency: snow-docker-volume-shots
        - dependency: snow-docker-volume-masks
        - dependency: snow-docker-volume-daily-shots
        - dependency: configuration-demo
        - network: snow-docker-network
        - registry: snow-docker-registry

    snow-daily-median-aggregator: 
      type: sodalite.nodes.DockerizedComponent 
      properties:  
        docker_network_name:  { get_property: [ SELF, network, name ] } 
        volumes:  
        - /tmp/conf/config.json:/SnowWatch-SODALITE/config.json 
        - "snow_volume_shots:/SnowWatch-SODALITE/data/shots"
        - "snow_volume_daily_shots:/SnowWatch-SODALITE/data/daily_shots"
        image_name:  snow-daily-median-aggregator:latest
        alias: snow-daily-median-aggregator
        restart_policy: always
        command: 
          - "{{ ansible_date_time.date }}"
          - "34 40 50 62 608 666 822 852 943 1307 6666"
      requirements:  
        - host:  snow-docker-host
        - dependency: snow-mysql
        - dependency: snow-docker-volume-shots
        - dependency: snow-docker-volume-daily-shots
        - dependency: configuration-demo        
        - network: snow-docker-network
        - registry: snow-docker-registry

    snow-skyline-extractor:  
      type: sodalite.nodes.DockerizedComponent 
      properties:  
        alias: snow-skyline-extractor
        volumes:  /tmp/docker:/tmp 
        image_name:  snow-skyline-extractor:latest 
        ports:  ['8080:8080'] 
        exposed_ports:  ['8080'] 
      requirements:  
        - host:  snow-docker-host-2 
        - registry: snow-docker-registry

    snow-skyline-alignment:  
      type: sodalite.nodes.DockerizedComponent 
      properties:  
        alias: snow-skyline-alignment
        volumes:  /tmp/docker:/tmp 
        image_name:  snow-skyline-alignment:latest 
        exposed_ports:  ['8080'] 
        ports:  ["8081:8080","80:8080"]
      requirements:  
        - host:  snow-docker-host-2 
        - registry: snow-docker-registry


### Start the Snow use case
    snow-docker-volume-demo-output:
      type: sodalite.nodes.DockerVolume
      properties:  
        name: snow_volume_demo_output
      requirements:
        - host: snow-vm
        - dependency: snow-docker-host         

    snow-webcam-mockup:  
      type: sodalite.nodes.DockerizedComponent 
      properties:  
        docker_network_name:  { get_property: [ SELF, network, name ] } 
        image_name:  snow-webcam-mockup:latest 
        alias: snow-webcam-mockup
        ports:  ['8082:8080'] 
        exposed_ports:  ['8082'] 
      requirements:  
        - host:  snow-docker-host 
        - network: snow-docker-network  
        - registry: snow-docker-registry
    
    snow-demo: 
      type: sodalite.nodes.DockerizedComponent 
      properties:  
        docker_network_name:  { get_property: [ SELF, network, name ] } 
        volumes:  
        - /tmp/conf/config.json:/SnowWatch-SODALITE/config.json 
        - "snow_volume_daily_shots:/SnowWatch-SODALITE/data/daily_shots"
        - "snow_volume_demo_output:/SnowWatch-SODALITE/data/output"
        image_name:  snow-demo:latest
        alias: snow-demo
        restart_policy: always
        command: 
          - "{{ ansible_date_time.date }}"
      requirements:  
        - host:  snow-docker-host
        - dependency: snow-mysql
        - dependency: snow-docker-volume-daily-shots
        - dependency: snow-docker-volume-demo-output
        - dependency: configuration-demo    
        - network: snow-docker-network 
        - registry: snow-docker-registry

    snow-demo-nginx:   
      type: sodalite.nodes.DockerizedComponent 
      properties:  
        volumes:  
        - "snow_volume_demo_output:/usr/share/nginx/html"
        image_name:  nginx:latest
        alias: snow-nginx
        restart_policy: always
        ports:  ['80:80'] 
        exposed_ports:  ['80']
      requirements:  
        - host:  snow-docker-host
        - dependency: snow-demo
        - dependency: snow-docker-volume-demo-output
        - registry: snow-docker-registry
  

### Data movement from local file system to S3
    # Nifi instance
    Nifi_0:
      type: radon.nodes.nifi.Nifi
      metadata:
        x: "643"
        y: "325"
        displayName: "Nifi"
      properties:
        port: 8080 # 8080 port is occupied by snow components # 8080
        component_version: "1.13.2"
      requirements:
        - host:
            node: snow-vm
            relationship: con_HostedOn_0
            capability: host
        - dependency: snow-demo-nginx

    # S3 bucket
    PubsS3Bucket_0:
      type: radon.nodes.datapipeline.destination.PubsS3Bucket
      metadata:
        x: "988"
        y: "123"
        displayName: "PubsS3Bucket"
      properties:
        BucketName: "snow-uc-processed-images" # TODO: shall be changed
        cred_file_path: "/home/kml/.aws/nifi_credentials" # TODO: shall be changed
        name: "SendToS3" # TODO: shall be changed
        Region: "eu-central-1"
      requirements:
        - host:
            node: Nifi_0
            relationship: con_HostedOn_2
            capability: host

    # Transmission of local file to S3
    ConsumeLocal_0:
      type: radon.nodes.datapipeline.source.ConsumeLocal
      metadata:
        x: "309"
        y: "115"
        displayName: "ConsumeLocal"
      properties:
        name: "consumeLocalFolder"
        directory: "/var/lib/docker/volumes/snow_volume_demo_output/_data/img" # TODO: shall be changed
      requirements:
        - connectToPipeline:
            node: PubsS3Bucket_0
            relationship: con_ConnectNifiLocal_0
            capability: ConnectToPipeline
        - host:
            node: Nifi_0
            relationship: con_HostedOn_1
            capability: host


### Lambda thumbnail generation
    # orchestrator's aws dependencies to invoke lambda
    AwsPlatform:
      type: radon.nodes.aws.AwsPlatform
      metadata:
        x: "875"
        y: "467"
        displayName: "AwsPlatform"
      properties:
        name: "AWS"
        region: "eu-central-1"
      requirements:
        - dependency: ConsumeLocal_0

    # source bucket with images
    AwsS3SourceBucket:
      type: radon.nodes.aws.AwsS3Bucket
      metadata:
        x: "437"
        y: "272"
        displayName: "SourceBucket"
      properties:
        maxsize: "0 MB"
        name: "snow-uc-processed-images"
      requirements:
        - host:
            node: AwsPlatform
            relationship: con_HostedOn_4
            capability: host
        - invoker:
            node: AwsLambdaFunction
            relationship: con_AwsTriggers_0
            capability: invocable

    # thumbnail-lambda-generator
    AwsLambdaFunction:
      type: radon.nodes.aws.AwsLambdaFunction
      metadata:
        x: "875"
        y: "93"
        displayName: "ThumbnailGenerator"
      properties:
        handler: "spblab.thumbgen.lambda.ThumbnailGenerationHandler"
        memory: 256
        name: "snow-uc-lambda-thumbnail-generator"
        runtime: "java8"
        alias: "dev"
        statement_id: "lambda_test_permission01"
        zip_file: { get_artifact: [ SELF, thumbnail-generator ] }
        timeout: 300
        env_vars:
          THUMBNAIL_BUCKET: "snow-uc-thumbnails"
        concurrency: 0
      requirements:
        - host:
            node: AwsPlatform
            relationship: con_HostedOn_3
            capability: host
        - endpoint:
            node: AwsS3TargetBucket
            relationship: con_ConnectsTo_0
            capability: storage_endpoint
      artifacts:
        thumbnail-generator:
          type: radon.artifacts.archive.JAR
          file: radon/servicetemplates/radon.blueprints/ThumbnailGeneration/files/AwsLambdaFunction/thumbnail-generator/thumbnail-generator-dev.jar

    # target bucket for thumbnails
    AwsS3TargetBucket:
      type: radon.nodes.aws.AwsS3Bucket
      metadata:
        x: "1294"
        y: "271"
        displayName: "TargetBucket"
      properties:
        maxsize: "0 MB"
        name: "snow-uc-thumbnails"
      requirements:
        - host:
            node: AwsPlatform
            relationship: con_HostedOn_5
            capability: host

    s3-gallery-config:
      type: sodalite.nodes.S3GalleryFrontEndConfiguration  
      properties:  
        dest_dir_path: { get_input: s3-gallery-config-path }    
      requirements:
        - host: snow-vm 
        - dependency: AwsS3TargetBucket

    s3-gallery:  
      type: sodalite.nodes.DockerizedComponent 
      properties:  
        docker_network_name: { get_property: [ SELF, network, name ] } 
        volumes:  
        - /tmp/s3-gallery:/var/www/html
        ports: ['8087:80'] 
        exposed_ports: ['8087'] 
        image_name: php:7.2-apache-python3-boto3
        alias: s3-gallery
        env: { get_input: s3-gallery-env }
      requirements:  
        - host: snow-docker-host 
        - dependency: s3-gallery-config
        - network: snow-docker-network 
        - registry: snow-docker-registry


## RADON relationships templates
  relationship_templates:
    con_HostedOn_0:
      type: tosca.relationships.HostedOn
    con_HostedOn_1:
      type: tosca.relationships.HostedOn
    con_HostedOn_2:
      type: tosca.relationships.HostedOn
    con_HostedOn_3:
      type: tosca.relationships.HostedOn
    con_HostedOn_4:
      type: tosca.relationships.HostedOn
    con_HostedOn_5:
      type: tosca.relationships.HostedOn
    con_ConnectNifiLocal_0:
      type: radon.relationships.datapipeline.ConnectNifiLocal
    con_ConnectsTo_0:
      type: radon.relationships.ConnectsTo
    con_AwsTriggers_0:
      type: radon.relationships.aws.AwsTriggers
      properties:
        events: "s3:ObjectCreated:*"
